/*
   Fermat: https://Pup05@bitbucket.org/Pup05/fermat.git
   Copyright (C) 2015 Jason Coon

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

uint8_t fibonacciToPhysicalOrder[NUM_LEDS_PER_STRIP] = {
  0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 9, 14, 15, 13, 18, 12, 17, 19, 16,
  24, 20, 23, 25, 21, 30, 26, 22, 31, 27, 36, 32, 28, 37, 33, 29, 38, 34, 43, 39,
  35, 44, 40, 49, 45, 41, 50, 46, 42, 51, 47, 56, 52, 48, 57, 53, 63, 58, 54, 64,
  59, 55, 65, 60, 71, 66, 61, 72, 67, 70, 73, 68, 79, 74, 62, 80, 75, 78, 81, 76,
  88, 82, 77, 89, 83, 87, 90, 69, 97, 91, 86, 98, 92, 96, 99, 85, 108, 100, 95, 110,
  84, 107, 112, 94, 109, 101, 106, 111, 93, 122, 113, 105, 124, 102, 121, 126, 104, 123, 114, 120,
  125, 103, 139, 127, 119, 142, 115, 137, 145, 118, 140, 128, 135, 143, 116, 138, 146, 133, 141, 129,
  136, 144, 117, 160, 147, 134, 163, 130, 158, 166, 132, 161, 148, 156, 164, 131, 159, 167, 154, 162,
  149, 157, 165, 152, 183, 168, 155, 188, 150, 179, 193, 153, 185, 169, 176, 190, 151, 181, 195, 174,
  187, 199, 178, 192, 172, 184, 197, 175, 189, 170, 180, 194, 173, 186, 198, 177, 191, 171, 182, 196
};

uint8_t physicalToFibonacciOrder[NUM_LEDS_PER_STRIP] = {
  0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 16, 14, 12, 13, 19, 17, 15, 18,
  21, 24, 27, 22, 20, 23, 26, 29, 32, 35, 25, 28, 31, 34, 37, 40, 30, 33, 36, 39,
  42, 45, 48, 38, 41, 44, 47, 50, 53, 43, 46, 49, 52, 55, 58, 61, 51, 54, 57, 60,
  63, 66, 74, 56, 59, 62, 65, 68, 71, 87, 69, 64, 67, 70, 73, 76, 79, 82, 77, 72,
  75, 78, 81, 84, 100, 95, 90, 85, 80, 83, 86, 89, 92, 108, 103, 98, 93, 88, 91, 94,
  97, 105, 113, 121, 116, 111, 106, 101, 96, 104, 99, 107, 102, 110, 118, 126, 134, 142, 129, 124,
  119, 114, 109, 117, 112, 120, 115, 123, 131, 139, 147, 155, 150, 137, 145, 132, 140, 127, 135, 122,
  130, 138, 125, 133, 141, 128, 136, 144, 152, 160, 168, 176, 163, 171, 158, 166, 153, 161, 148, 156,
  143, 151, 159, 146, 154, 162, 149, 157, 165, 173, 189, 197, 184, 192, 179, 187, 174, 195, 182, 169,
  190, 177, 198, 164, 185, 172, 193, 180, 167, 188, 175, 196, 183, 170, 191, 178, 199, 186, 194, 181
};

// Params for width and height
const uint8_t kMatrixWidth = 32;
const uint8_t kMatrixHeight = 32;

const uint8_t maxX = kMatrixWidth - 1;
const uint8_t maxY = kMatrixHeight - 1;

const uint8_t coordsX10[NUM_LEDS_PER_STRIP] = {
  4, 5, 4, 5, 5, 3, 6, 4, 4, 6, 3, 5, 5, 3, 6, 3, 4, 6, 3, 6, 4, 3, 7, 3, 5, 5, 2, 7, 3, 4, 7, 2, 6, 5, 3, 7, 3, 5, 6, 2, 7, 4, 3, 7, 2, 6, 5, 2, 7, 3, 4, 7, 1, 7, 4, 3, 8, 2, 5, 6, 1, 7, 3, 3, 7, 1, 6, 5, 2, 8, 2, 5, 7, 1, 7, 4, 3, 8, 1, 6, 6, 1, 8, 3, 4, 8, 1, 7, 5, 2, 8, 2, 5, 7, 1, 8, 3, 3, 8, 1, 6, 5, 1, 8, 2, 4, 7, 1, 8, 4, 2, 8, 1, 6, 6, 1, 8, 3, 3, 8, 0, 7, 5, 1, 9, 1, 5, 7, 0, 8, 4, 2, 9, 1, 6, 6, 1, 9, 2, 4, 8, 0, 7, 4, 2, 9, 1, 5, 7, 0, 8, 3, 3, 8, 0, 7, 5, 1, 9, 2, 4, 8, 0, 8, 4, 2, 9, 1, 6, 6, 0, 9, 2, 3, 8, 0, 7, 5, 1, 9, 1, 5, 7, 0, 8, 3, 3, 9, 0, 7, 6, 1, 9, 2, 4, 8, 0, 8, 4, 2
};

const uint8_t coordsY10[NUM_LEDS_PER_STRIP] = {
  5, 4, 4, 5, 4, 5, 5, 3, 6, 4, 4, 6, 3, 5, 5, 3, 6, 3, 4, 6, 2, 6, 4, 3, 6, 2, 5, 5, 2, 7, 3, 4, 6, 2, 6, 4, 3, 7, 2, 5, 6, 2, 7, 3, 3, 7, 2, 6, 5, 2, 7, 2, 4, 7, 1, 7, 4, 3, 8, 2, 5, 6, 1, 8, 3, 4, 7, 1, 7, 5, 2, 8, 2, 5, 7, 1, 7, 3, 3, 8, 1, 6, 5, 1, 8, 2, 4, 7, 1, 7, 4, 2, 8, 1, 5, 6, 1, 8, 3, 3, 8, 1, 7, 5, 1, 8, 2, 5, 7, 0, 8, 4, 2, 8, 1, 6, 6, 1, 8, 2, 4, 8, 0, 7, 5, 2, 9, 1, 5, 7, 0, 8, 3, 3, 8, 0, 7, 6, 1, 9, 2, 4, 8, 0, 8, 4, 2, 9, 1, 6, 6, 0, 9, 3, 3, 8, 0, 7, 5, 1, 9, 1, 5, 7, 0, 8, 3, 2, 9, 0, 6, 6, 1, 9, 2, 4, 8, 0, 8, 4, 2, 9, 1, 5, 7, 0, 9, 3, 3, 9, 0, 7, 5, 1, 9, 2, 4, 8, 0, 8
};

const uint8_t coordsX32[NUM_LEDS_PER_STRIP] = {
  14, 18, 13, 16, 17, 12, 19, 14, 14, 20, 11, 18, 17, 11, 21, 12, 15, 20, 9, 21, 15, 11, 23, 9, 18, 19, 8, 23, 12, 13, 23, 7, 21, 16, 9, 24, 9, 16, 21, 6, 24, 13, 11, 25, 6, 20, 18, 7, 26, 10, 14, 24, 5, 23, 15, 9, 26, 7, 18, 21, 5, 26, 11, 12, 26, 4, 22, 17, 6, 27, 7, 16, 24, 4, 25, 13, 9, 27, 5, 20, 20, 4, 28, 9, 13, 26, 3, 24, 16, 6, 29, 5, 17, 23, 3, 27, 11, 10, 28, 3, 22, 19, 4, 29, 7, 15, 26, 2, 26, 14, 7, 29, 4, 19, 22, 2, 29, 9, 11, 28, 2, 24, 17, 5, 30, 5, 16, 25, 1, 28, 12, 8, 29, 2, 21, 20, 3, 30, 7, 13, 27, 1, 26, 15, 6, 30, 3, 18, 23, 1, 29, 10, 10, 29, 1, 23, 19, 3, 31, 5, 15, 26, 0, 27, 13, 7, 30, 2, 20, 22, 1, 30, 8, 12, 28, 0, 25, 17, 4, 31, 4, 17, 25, 0, 29, 11, 9, 30, 1, 22, 20, 2, 31, 6, 14, 27, 0, 27, 14, 6
};

const uint8_t coordsY32[NUM_LEDS_PER_STRIP] = {
  16, 15, 13, 18, 12, 16, 17, 11, 19, 13, 14, 20, 10, 18, 16, 10, 21, 11, 15, 19, 8, 21, 14, 11, 22, 8, 18, 18, 8, 23, 11, 14, 22, 7, 21, 15, 9, 24, 8, 17, 20, 6, 24, 12, 11, 24, 6, 20, 17, 7, 25, 8, 15, 23, 4, 24, 14, 9, 26, 6, 19, 20, 5, 26, 10, 12, 25, 4, 22, 16, 7, 27, 6, 16, 23, 3, 26, 12, 10, 27, 4, 21, 19, 4, 28, 8, 14, 25, 2, 25, 15, 7, 28, 4, 18, 22, 3, 28, 10, 11, 27, 2, 23, 17, 5, 29, 6, 16, 25, 1, 27, 13, 8, 29, 3, 20, 21, 3, 29, 8, 12, 27, 1, 25, 16, 5, 30, 4, 18, 24, 1, 28, 11, 9, 29, 1, 22, 19, 3, 30, 6, 14, 26, 0, 27, 14, 7, 30, 3, 20, 22, 1, 30, 9, 11, 28, 1, 24, 17, 4, 31, 4, 16, 25, 0, 28, 12, 8, 30, 1, 22, 20, 2, 30, 7, 13, 28, 0, 26, 15, 5, 31, 3, 19, 24, 1, 29, 10, 10, 29, 1, 24, 18, 3, 31, 5, 15, 26, 0, 28
};

const uint8_t coordsX[NUM_LEDS_PER_STRIP] = {
  119, 146, 110, 132, 143, 98, 158, 116, 113, 164, 88, 150, 138, 89, 176, 96, 126, 165, 73, 171, 120, 95, 186, 75, 147, 154, 69, 189, 97, 111, 185, 59, 171, 134, 75, 201, 73, 135, 174, 52, 193, 107, 92, 203, 53, 163, 152, 56, 210, 79, 117, 193, 41, 190, 123, 71, 216, 54, 148, 173, 40, 212, 91, 97, 211, 36, 180, 144, 52, 225, 61, 129, 194, 29, 208, 109, 75, 225, 37, 164, 166, 35, 227, 75, 106, 213, 23, 197, 131, 53, 235, 45, 143, 189, 22, 223, 93, 83, 229, 23, 180, 155, 34, 239, 58, 120, 210, 14, 213, 116, 59, 241, 30, 159, 180, 19, 236, 77, 94, 228, 13, 197, 141, 39, 246, 42, 135, 203, 10, 227, 100, 70, 242, 18, 176, 167, 21, 246, 60, 109, 223, 6, 212, 125, 47, 250, 29, 152, 192, 9, 239, 83, 83, 239, 8, 192, 152, 27, 252, 45, 125, 215, 2, 226, 109, 58, 250, 17, 169, 179, 12, 248, 67, 98, 233, 2, 208, 136, 36, 255, 32, 142, 203, 3, 237, 92, 72, 247, 9, 185, 163, 19, 253, 52, 114, 224, 0, 221, 119, 48
};

const uint8_t coordsY[NUM_LEDS_PER_STRIP] = {
  133, 122, 111, 149, 100, 132, 140, 90, 159, 107, 112, 162, 80, 151, 131, 86, 176, 87, 127, 160, 68, 172, 111, 94, 184, 67, 149, 147, 66, 190, 88, 113, 180, 53, 174, 124, 75, 200, 64, 139, 166, 49, 195, 97, 94, 199, 46, 167, 143, 56, 210, 69, 122, 186, 37, 194, 113, 74, 214, 46, 154, 164, 39, 214, 81, 101, 205, 30, 185, 133, 54, 224, 52, 135, 185, 27, 211, 98, 79, 221, 30, 170, 156, 36, 228, 64, 113, 206, 19, 202, 120, 57, 233, 36, 151, 179, 22, 226, 82, 89, 224, 18, 187, 144, 38, 239, 48, 128, 202, 12, 218, 104, 66, 237, 23, 168, 169, 21, 238, 66, 103, 222, 9, 204, 130, 44, 245, 34, 144, 194, 10, 232, 88, 77, 238, 12, 185, 156, 25, 247, 50, 118, 216, 4, 219, 114, 54, 248, 21, 161, 182, 11, 243, 72, 92, 234, 4, 201, 141, 33, 253, 36, 135, 206, 2, 232, 97, 66, 247, 11, 178, 168, 16, 251, 57, 108, 226, 0, 216, 124, 44, 254, 24, 153, 193, 5, 242, 81, 82, 242, 5, 194, 152, 25, 255, 43, 126, 216, 0, 228
};

const uint8_t ledAngles[NUM_LEDS_PER_STRIP] = {
  158, 60, 218, 120, 23, 181, 83, 241, 143, 46, 204, 106, 9, 166, 69, 227, 129, 32, 189, 92, 250, 152, 55, 212, 115, 18, 175, 78, 235, 138, 41, 198, 101, 3, 161, 64, 221, 124, 26, 184, 87, 244, 147, 49, 207, 110, 12, 170, 72, 230, 133, 35, 193, 95, 253, 156, 58, 216, 118, 21, 179, 81, 239, 141, 44, 202, 104, 7, 164, 67, 225, 127, 30, 187, 90, 247, 150, 53, 210, 113, 15, 173, 76, 233, 136, 38, 196, 99, 1, 159, 61, 219, 122, 24, 182, 84, 242, 145, 47, 205, 107, 10, 168, 70, 228, 130, 33, 191, 93, 251, 153, 56, 214, 116, 19, 176, 79, 237, 139, 42, 199, 102, 5, 162, 65, 222, 125, 28, 185, 88, 245, 148, 51, 208, 111, 13, 171, 74, 231, 134, 36, 194, 97, 254, 157, 59, 217, 120, 22, 180, 82, 240, 143, 45, 203, 105, 8, 166, 68, 226, 128, 31, 189, 91, 249, 151, 54, 212, 114, 17, 174, 77, 235, 137, 40, 197, 100, 3, 160, 63, 220, 123, 26, 183, 86, 243, 146, 49, 206, 109, 11, 169, 72, 229, 132, 34, 192, 95, 252, 155
};

const uint8_t ledRadii[NUM_LEDS_PER_STRIP] = {
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
  120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199
};

void setPixelA(uint8_t angle, uint8_t dAngle, CRGB color)
{
  for (uint16_t i = 0; i < NUM_LEDS_PER_STRIP; i++) {
    uint8_t o = physicalToFibonacciOrder[i];

    uint8_t ao = ledAngles[o];

    if (ao <= angle + dAngle && ao >= angle - dAngle) {
      leds[i] = color;
    }
  }
}

void addColorA(uint8_t angle, uint8_t dAngle, CRGB color)
{
  for (uint16_t i = 0; i < NUM_LEDS_PER_STRIP; i++) {
    uint8_t o = physicalToFibonacciOrder[i];

    uint8_t ao = ledAngles[o];

    for (uint8_t j = 0; j <= dAngle; j++) {
      if (ao == angle + j / 2 || ao == angle - j / 2) {
        leds[i] += color;
        break;
      }
    }
  }
}

void setPixelAR(uint8_t angle, uint8_t radius, uint8_t dAngle, uint8_t dRadius, CRGB color)
{
  for (uint16_t i = 0; i < NUM_LEDS_PER_STRIP; i++) {
    uint8_t o = physicalToFibonacciOrder[i];

    uint8_t ao = ledAngles[o];

    if (ao <= qadd8(angle, dAngle) && ao >= qsub8(angle, dAngle)) {
      uint8_t ro = ledRadii[o];

      if (ro <= qadd8(radius, dRadius) && ro >= qsub8(radius, dRadius)) {
        leds[i] = color;
      }
    }
  }
}

void setPixelXY10(uint8_t x, uint8_t y, CHSV color)
{
  if ((x >= 10) || (y >= 10)) {
    return;
  }

  for (uint16_t i = 0; i < NUM_LEDS_PER_STRIP; i++) {
    uint8_t o = physicalToFibonacciOrder[i];

    if (coordsX10[o] == x && coordsY10[o] == y) {
		holder[800 + i] = color;
		//leds[800 + i] = color;
    }
  }
}

void setPixelXY(uint8_t x, uint8_t y, CRGB color)
{
  if ((x >= kMatrixWidth) || (y >= kMatrixHeight)) {
    return;
  }

  for (uint16_t i = 0; i < NUM_LEDS_PER_STRIP; i++) {
    uint8_t o = physicalToFibonacciOrder[i];

    if (coordsX32[o] == x && coordsY32[o] == y) {
      leds[i] = color;
      //      return;
    }
  }
}

// algorithm from http://en.wikipedia.org/wiki/Midpoint_circle_algorithm
void drawCircle(uint8_t x0, uint8_t y0, uint8_t radius, const CRGB color)
{
  int a = radius, b = 0;
  int radiusError = 1 - a;

  if (radius == 0) {
    setPixelXY(x0, y0, color);
    return;
  }

  while (a >= b)
  {
    setPixelXY(a + x0, b + y0, color);
    setPixelXY(b + x0, a + y0, color);
    setPixelXY(-a + x0, b + y0, color);
    setPixelXY(-b + x0, a + y0, color);
    setPixelXY(-a + x0, -b + y0, color);
    setPixelXY(-b + x0, -a + y0, color);
    setPixelXY(a + x0, -b + y0, color);
    setPixelXY(b + x0, -a + y0, color);

    b++;
    if (radiusError < 0)
      radiusError += 2 * b + 1;
    else
    {
      a--;
      radiusError += 2 * (b - a + 1);
    }
  }
}
